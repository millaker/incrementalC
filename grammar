<program> = <func_decl>
<func_decl> = "int" <Identifier> "(" ")" "{" <statement_list> "}"
<statement_list> = <statement> { <statement_list> }
<statement> = "return" <expr> ";"
            | <expr> ";"
            | <var_decl> ";"
<var_decl> = "int" <Identifier> ["=" <expr>]
<expr> = <assign> 
       | <logical-or>
<logical-or> =  <logical-AND-expr> {"||" <logcial-AND-expr>}  
<assign> = <Identifier> ('=' | '^=' | '&=' | '|=' | '+=' | '*=' | '-=' | '/=' | '%=' | '<<=' | '>>=') <expr>
<logical-AND-expr> = <bitwise-OR> {"&&" <bitwise-OR>}
<bitwise-OR> = <bitwise-XOR> {"|" <bitwise-XOR>}
<bitwise-XOR> = <bitwise-AND> {"^" <bitwise-AND>}
<bitwise-AND> = <rel-eq> { "&" <rel-eq> }
<eq> = <rel> { ("==" | "!=") <rel> }
<rel> = <bit-shift> {(">" | "<" | "<=" | ">=") <bit-shift>}
<bit-shift> = <additive> {("<<" | ">>") <additive>}
<additive> = <term> {("+" | "-") <term>}
<term> = <unary-expr> {("*" | "/" | "%")<unary-expr>}
<unary-expr> = <postfix-expr>
             | <UnaryOP> <unary-expr>
<postfix-expr> = <primary> <postfix-op>
<postfix-op> = ("++" | "--") <postfix-op>
<primary> = "(" <expr> ")"
         | IntLiteral
         | <Identifier>  # This is for variable
<UnaryOP> = "~"
          | "!"
          | "-"
          | "++"
          | "--"
